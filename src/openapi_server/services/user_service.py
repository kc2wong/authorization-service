from generated.openapi_server.models.update_user_request import UpdateUserRequest
from generated.openapi_server.models.user import User

from openapi_server.config.mongdb import get_database
from openapi_server.util.datetime_util import current_datetime_utc
from openapi_server.util.dictionary_util import camelize_keys, remove_keys

from openapi_server.models.error import VersionNotMatchException
from openapi_server.config.logging import logger


def get_user_by_id(user_id:str) -> User:
    database = get_database()

    filter = {"user_id": user_id}
    logger.debug("get_user_by_id(), filter = {0}".format(filter))

    result = database["user"].find_one(filter)
    if result is None:
        return result
    else:
        return User.from_dict(camelize_keys(result))


def create_user(update_user_request:UpdateUserRequest, current_user_id:str=None) -> User:
    current_datetime = current_datetime_utc()
    dict = camelize_keys(update_user_request.to_dict())

    user = User.from_dict(dict)
    user.version = 1
    user.created_by = current_user_id or "system"
    user.created_date_time = current_datetime
    user.updated_by = current_user_id or "system"    
    user.updated_date_time = current_datetime

    user_ditct = user.to_dict();
    # Convert datetime to string when writing to database
    user_ditct["created_date_time"] = user.created_date_time.isoformat() 
    user_ditct["updated_date_time"] = user.updated_date_time.isoformat() 
    logger.debug("create_user(), dict to insert = {0}".format(user_ditct))

    database = get_database()
    database["user"].insert_one(user_ditct)
    return user


def update_user(user: User, update_user_request: UpdateUserRequest, current_user_id:str=None) -> User:
    current_datetime = current_datetime_utc()

    if update_user_request.version != user.version: 
        raise VersionNotMatchException(
            update_user_request.version, user.version)

    current_version = user.version

    # Merge existing profile with input request
    # to_dict() method generated by openapi generator does not datetime to correct formatted string, to need to exclude the datetime field
    user_dict = remove_keys(user.to_dict(), ["created_date_time", "updated_date_time"]) | remove_keys(update_user_request.to_dict(), ["user_id"])
    new_user = User.from_dict(camelize_keys(user_dict))
    new_user.created_date_time = user.created_date_time
    new_user.version = user.version + 1
    new_user.updated_by = current_user_id or "system"
    new_user.updated_date_time = current_datetime

    query = { "user_id": user.user_id, "version": current_version }
    new_values = remove_keys(new_user.to_dict(), ["created_by", "created_date_time"])
    # Convert datetime to string when writing to database
    new_values["updated_date_time"] = new_user.updated_date_time.isoformat() 
    logger.info("update_user(), dict to update = {0}".format(new_values))

    database = get_database()
    user_collection = database["user"]
    num_row_updated = user_collection.update_one(query, { "$set": new_values }).matched_count
    logger.info("update_user(), numOfRowUpdated = {0}".format(num_row_updated))
    if num_row_updated != 1:
        # For simplicity, assume the version in database is being incremented
        raise VersionNotMatchException(
            update_user_request.version, update_user_request.version + 1)

    return new_user